    1  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
    2  trap stop SIGINT
    3  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
    4  #!/bin/bash
    5  set -euo pipefail
    6  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
    7  QUIET_MODE="--quiet"
    8  init() {   ./gradlew assemble; }
    9  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   10  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   11  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   12  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   13  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   14  stop() {   stopBackend;   stopFrontend; }
   15  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   16  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   17  trap stop SIGINT
   18  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   19  #!/bin/bash
   20  set -euo pipefail
   21  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   22  QUIET_MODE="--quiet"
   23  init() {   ./gradlew assemble; }
   24  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   25  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   26  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   27  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   28  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   29  stop() {   stopBackend;   stopFrontend; }
   30  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   31  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   32  trap stop SIGINT
   33  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   34  #!/bin/bash
   35  set -euo pipefail
   36  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   37  QUIET_MODE="--quiet"
   38  init() {   ./gradlew assemble; }
   39  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   40  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   41  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   42  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   43  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   44  stop() {   stopBackend;   stopFrontend; }
   45  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   46  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   47  trap stop SIGINT
   48  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   49  #!/bin/bash
   50  set -euo pipefail
   51  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   52  QUIET_MODE="--quiet"
   53  init() {   ./gradlew assemble; }
   54  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   55  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   56  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   57  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   58  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   59  stop() {   stopBackend;   stopFrontend; }
   60  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   61  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   62  trap stop SIGINT
   63  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   64  #!/bin/bash
   65  set -euo pipefail
   66  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   67  QUIET_MODE="--quiet"
   68  init() {   ./gradlew assemble; }
   69  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   70  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   71  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   72  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   73  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   74  stop() {   stopBackend;   stopFrontend; }
   75  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   76  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   77  trap stop SIGINT
   78  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   79  #!/bin/bash
   80  set -euo pipefail
   81  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   82  QUIET_MODE="--quiet"
   83  init() {   ./gradlew assemble; }
   84  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
   85  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
   86  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
   87  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
   88  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
   89  stop() {   stopBackend;   stopFrontend; }
   90  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
   91  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
   92  trap stop SIGINT
   93  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
   94  #!/bin/bash
   95  set -euo pipefail
   96  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
   97  QUIET_MODE="--quiet"
   98  init() {   ./gradlew assemble; }
   99  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
  100  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
  101  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
  102  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
  103  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
  104  stop() {   stopBackend;   stopFrontend; }
  105  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
  106  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
  107  trap stop SIGINT
  108  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
  109  #!/bin/bash
  110  set -euo pipefail
  111  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
  112  QUIET_MODE="--quiet"
  113  init() {   ./gradlew assemble; }
  114  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
  115  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
  116  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
  117  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
  118  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
  119  stop() {   stopBackend;   stopFrontend; }
  120  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
  121  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
  122  trap stop SIGINT
  123  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
  124  #!/bin/bash
  125  set -euo pipefail
  126  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
  127  QUIET_MODE="--quiet"
  128  init() {   ./gradlew assemble; }
  129  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
  130  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
  131  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
  132  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
  133  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
  134  stop() {   stopBackend;   stopFrontend; }
  135  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
  136  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
  137  trap stop SIGINT
  138  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
  139  #!/bin/bash
  140  set -euo pipefail
  141  readonly ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
  142  QUIET_MODE="--quiet"
  143  init() {   ./gradlew assemble; }
  144  stopFrontend() {   if lsof -i:3000 -t &> /dev/null; then     printf "\n======== Stopping frontend ========\n";     pkill node || true;   fi; }
  145  startFrontend() {   cd frontend || exit 1;   stopFrontend;    printf "\n======== Starting frontend ========\n";   if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/frontend_output.log";     BROWSER=none npm start &> "$ROOT_DIR/scripts/out/frontend_output.log" &   else     npm start &   fi;   cd ..; }
  146  stopBackend() {   if lsof -i:8080 -t &> /dev/null; then     printf "\n======== Stopping backend ========\n";     pkill java || true;   fi; }
  147  startBackend() {   stopBackend;   printf "\n======== Starting backend ========\n";    if [[ $1 == "$QUIET_MODE" ]]; then     echo "Entering quiet mode, output goes here ./scripts/out/backend_output.log";     ./gradlew :backend:bootRun > "$ROOT_DIR/scripts/out/backend_output.log" &   else     ./gradlew :backend:bootRun &   fi; }
  148  start() {   mkdir -p "$ROOT_DIR/scripts/out";    startBackend "$1";   startFrontend "$1"; }
  149  stop() {   stopBackend;   stopFrontend; }
  150  testBackend() {   printf "\n======== Running backend unit tests ========\n";   ./gradlew :backend:test; }
  151  testE2e() {   cd e2e || exit 1;   if [[ $1 == "$QUIET_MODE" ]]; then     npm test;   else     npm run open;   fi;   cd ..; }
  152  trap stop SIGINT
  153  case $1 in init)   init;   ;; backend)   testBackend;   ;; ci)   testBackend;   start $QUIET_MODE;   testE2e $QUIET_MODE;   stop;   ;; e2e)   echo 'make sure you have executed the "start" command';   testE2e "${2:-}";   ;; start)   start "${2:-}";   if [[ ${2:-} != "$QUIET_MODE" ]]; then     wait;   fi;   ;; stop)   stop;   ;; *)   echo 'Unknown command. Please specify "init", "backend", "ci", "e2e", "start( --quiet)", or "stop"';   ;; esac
  154  git status
  155  git commit -m "tap up and running"
  156  gigit branch -M main
  157  git remote add origin https://github.com/KamyMantha/tap-up-and-running.git
  158  git branch -M main
  159  git remote add origin https://github.com/KamyMantha/tap-up-and-running.git
  160  git push
  161  git push --set-upstrwam origin main
  162  git push --set-upstream origin main
  163  git push --set-upstream origin main
  164  git push -u origin main
  165  git push -u origin main
  166  git push -u origin main
  167  git login
  168  git push -u origin main
  169  git push -u origin main
  170  otal 45 (delta 5), reused 0 (delta 0), pack-reused 0
  171  git config -global http.postBuffer 1048576000
  172  git config --global http.postBuffer 1048576000
  173  git push -u origin main
  174  git push -u origin main
  175  git push -u origin main
  176  ls
  177  git push -u origin main
  178  exit
  179  aws configure
  180  export cluster_name=tap-aws-13
  181  env
  182  env |grep -i cluster
  183  export number_of_nodes=3
  184  export AWS_REGION=us-east-2
  185  pwd
  186  ./scripts/eks-create-cluster.sh 
  187  ./scripts/eks-create-cluster.sh tap-aws-13 3
  188  clear
  189   eksctl create cluster --name $cluster_name --region $AWS_REGION --without-nodegroup
  190  $  eksctl create cluster --name $cluster_name --region $AWS_REGION --without-nodegroup
  191   export AWS_ACCESS_KEY_ID=ASIA2FR7TGQEN26HCBEE
  192   export AWS_SECRET_ACCESS_KEY=j0Bgk71AoyAx8VhmqFGsP/RqFcsJFNe5k/kEDOyk
  193   export AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEE8aCXVzLWVhc3QtMSJHMEUCIGII38tBn0/G7JLHMh/ZL7EAdd/yewvv317UAqUulCQOAiEAtPpUuAHHcpKP0Qr6/fegLTfTDRmc/Z4yOG144n7nQIoqnwIIZxABGgw2OTkxMzkzMDY1MDQiDHowQnL/m7b47J00byr8AXZ5RwjmlrmoGmDECMwJzCCr2vzfzBF2nrIxH8VTLctjSTML9N9cfN195uoCU3UMtPU/ROFs3lUH5wkAztBIOu4OegdzjqgUGPJxuA15HEiLMBXf2tNtqP7pCGQZP68N/Y033PdJ7uCq+PhkaLY2sVwsSol3l+mqFitcopE+rGSYpVOAU3lcXYL7eO34+NprkBJp93APHiFcAfrvV9L30BisAUnVlhdLAGLuvlHiFN25ysxHKFBa51Kzbm7y5mb8qUczVCJYOHnUl7WSxwe8fruP2SYNfHoqeTgvMDRrFzhzhidIGIhf45ZGD4I9fJZwFL1ahfp0XDjVXjMxPDD3hJqcBjqdAboGLTLuU/EFMsKotrlt7YnJ29Kj+KcpBLeqo7ZBqxVOWqsy2HQFxVtNPXkJhWHswdfPJHLFTkCQr8sjwIQ2v7FgEfhAf8bMfHjbC6Dymhkn69FSNGKP5XKvn7HuJA8+ZSPyMoDykxKrGnHt3Jt8X9aiQ+okaNSFq5Y8Ea6RCiXYQKqPB+i/HXTNYf9aHOnA6Hru87VCOizYlO05ZUA=
  194    eksctl create cluster --name $cluster_name --region $AWS_REGION --without-nodegroup
  195  export containerdAMI=$(aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.21/amazon-linux-2/recommended/image_id --region $AWS_REGION --query "Parameter.Value" --output text)
  196  aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.21/amazon-linux-2/recommended/image_id --region $AWS_REGION --query "Parameter.Value" --output text
  197  aws ssm get-parameter --help
  198  aws ssm get-parameter --name -h
  199    eksctl get cluster
  200    eksctl describe cluster
  201    eksctl --help
  202  containerdAMI=$(aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.23/amazon-linux-2/recommended/image_id --region $AWS_REGION --query "Parameter.Value" --output text)
  203  aws ssm get-parameters
  204  aws ssm get-parameters --name
  205  aws ssm get-parameters -h
  206  containerdAMI=$(aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.23/amazon-linux-2/recommended/image_id --region $AWS_REGION --query "Parameter.Value" --output text)
  207  aws ssm -h
  208  aws ssm get-parameters -names
  209  aws ssm get-parameters --names
  210  aws ssm get-parameters --names --region u-east-2
  211  aws ssm get-parameters --names --region us-east-2
  212  aws ssm get-parameters --names --region=us-east-2
  213     aws ssm describe-parameters
  214     aws ssm describe-parameters --region us-east-1
  215  aws ssm get-parameters --names --region=us-east-2
  216     aws ssm describe-parameters
  217     aws ssm describe-parameters --region us-east-1
  218  aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.21/amazon-linux-2/recommended/image_id --region $AWS_REGION --query "Parameter.Value"
  219  export containerAMI=ami-0136f2e4cb92702e4
  220  export bootstrap_cmd="/etc/eks/bootstrap.sh $cluster_name --container-runtime containerd"
  221  cat <<EOF | eksctl create nodegroup -f -
  222  apiVersion: eksctl.io/v1alpha5
  223  kind: ClusterConfig
  224  metadata:
  225    name: $cluster_name
  226    region: $AWS_REGION
  227  managedNodeGroups:
  228    - name: $cluster_name-containerd-ng
  229      ami: $containerdAMI
  230      instanceType: $AWS_INSTANCE_TYPE
  231      desiredCapacity: $number_of_nodes
  232      volumeSize: 100
  233      overrideBootstrapCommand: $bootstrap_cmd
  234  EOF
  235  export containerdAMI=ami-0136f2e4cb92702e4
  236  cat <<EOF | eksctl create nodegroup -f -
  237  apiVersion: eksctl.io/v1alpha5
  238  kind: ClusterConfig
  239  metadata:
  240    name: $cluster_name
  241    region: $AWS_REGION
  242  managedNodeGroups:
  243    - name: $cluster_name-containerd-ng
  244      ami: $containerdAMI
  245      instanceType: $AWS_INSTANCE_TYPE
  246      desiredCapacity: $number_of_nodes
  247      volumeSize: 100
  248      overrideBootstrapCommand: $bootstrap_cmd
  249  EOF
  250  oidc_id=$(aws eks describe-cluster --name my-cluster --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
  251  oidc_id=$(aws eks describe-cluster --name tap-aws-13 --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
  252  aws iam list-open-id-connect-providers | grep $oidc_id
  253  eksctl utils associate-iam-oidc-provider --cluster tap-aws-13 --approve
  254  aws ecr create-repository --repository-name tap-images --region $AWS_REGION
  255  aws ecr create-repository --repository-name tap-build-service --region $AWS_REGION
  256  oidcProvider=$(aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION | jq '.cluster.identity.oidc.issuer' | tr -d '"' | sed 's/https:\/\///')
  257  cat << EOF > build-service-trust-policy.json
  258  {
  259      "Version": "2012-10-17",
  260      "Statement": [
  261          {
  262              "Effect": "Allow",
  263              "Principal": {
  264                  "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${oidcProvider}"
  265              },
  266              "Action": "sts:AssumeRoleWithWebIdentity",
  267              "Condition": {
  268                  "StringEquals": {
  269                      "${oidcProvider}:aud": "sts.amazonaws.com"
  270                  },
  271                  "StringLike": {
  272                      "${oidcProvider}:sub": [
  273                          "system:serviceaccount:kpack:controller",
  274                          "system:serviceaccount:build-service:dependency-updater-controller-serviceaccount"
  275                      ]
  276                  }
  277              }
  278          }
  279      ]
  280  }
  281  EOF
  282  cat << EOF > build-service-policy.json
  283  {
  284      "Version": "2012-10-17",
  285      "Statement": [
  286          {
  287              "Action": [
  288                  "ecr:DescribeRegistry",
  289                  "ecr:GetAuthorizationToken",
  290                  "ecr:GetRegistryPolicy",
  291                  "ecr:PutRegistryPolicy",
  292                  "ecr:PutReplicationConfiguration",
  293                  "ecr:DeleteRegistryPolicy"
  294              ],
  295              "Resource": "*",
  296              "Effect": "Allow",
  297              "Sid": "TAPEcrBuildServiceGlobal"
  298          },
  299          {
  300              "Action": [
  301                  "ecr:DescribeImages",
  302                  "ecr:ListImages",
  303                  "ecr:BatchCheckLayerAvailability",
  304                  "ecr:BatchGetImage",
  305                  "ecr:BatchGetRepositoryScanningConfiguration",
  306                  "ecr:DescribeImageReplicationStatus",
  307                  "ecr:DescribeImageScanFindings",
  308                  "ecr:DescribeRepositories",
  309                  "ecr:GetDownloadUrlForLayer",
  310                  "ecr:GetLifecyclePolicy",
  311                  "ecr:GetLifecyclePolicyPreview",
  312                  "ecr:GetRegistryScanningConfiguration",
  313                  "ecr:GetRepositoryPolicy",
  314                  "ecr:ListTagsForResource",
  315                  "ecr:TagResource",
  316                  "ecr:UntagResource",
  317                  "ecr:BatchDeleteImage",
  318                  "ecr:BatchImportUpstreamImage",
  319                  "ecr:CompleteLayerUpload",
  320                  "ecr:CreatePullThroughCacheRule",
  321                  "ecr:CreateRepository",
  322                  "ecr:DeleteLifecyclePolicy",
  323                  "ecr:DeletePullThroughCacheRule",
  324                  "ecr:DeleteRepository",
  325                  "ecr:InitiateLayerUpload",
  326                  "ecr:PutImage",
  327                  "ecr:PutImageScanningConfiguration",
  328                  "ecr:PutImageTagMutability",
  329                  "ecr:PutLifecyclePolicy",
  330                  "ecr:PutRegistryScanningConfiguration",
  331                  "ecr:ReplicateImage",
  332                  "ecr:StartImageScan",
  333                  "ecr:StartLifecyclePolicyPreview",
  334                  "ecr:UploadLayerPart",
  335                  "ecr:DeleteRepositoryPolicy",
  336                  "ecr:SetRepositoryPolicy"
  337              ],
  338              "Resource": [
  339                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tap-build-service",
  340                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tap-images"
  341              ],
  342              "Effect": "Allow",
  343              "Sid": "TAPEcrBuildServiceScoped"
  344          }
  345      ]
  346  }
  347  EOF
  348  cat << EOF > workload-policy.json
  349  {
  350      "Version": "2012-10-17",
  351      "Statement": [
  352          {
  353              "Action": [
  354                  "ecr:DescribeRegistry",
  355                  "ecr:GetAuthorizationToken",
  356                  "ecr:GetRegistryPolicy",
  357                  "ecr:PutRegistryPolicy",
  358                  "ecr:PutReplicationConfiguration",
  359                  "ecr:DeleteRegistryPolicy"
  360              ],
  361              "Resource": "*",
  362              "Effect": "Allow",
  363              "Sid": "TAPEcrWorkloadGlobal"
  364          },
  365          {
  366              "Action": [
  367                  "ecr:DescribeImages",
  368                  "ecr:ListImages",
  369                  "ecr:BatchCheckLayerAvailability",
  370                  "ecr:BatchGetImage",
  371                  "ecr:BatchGetRepositoryScanningConfiguration",
  372                  "ecr:DescribeImageReplicationStatus",
  373                  "ecr:DescribeImageScanFindings",
  374                  "ecr:DescribeRepositories",
  375                  "ecr:GetDownloadUrlForLayer",
  376                  "ecr:GetLifecyclePolicy",
  377                  "ecr:GetLifecyclePolicyPreview",
  378                  "ecr:GetRegistryScanningConfiguration",
  379                  "ecr:GetRepositoryPolicy",
  380                  "ecr:ListTagsForResource",
  381                  "ecr:TagResource",
  382                  "ecr:UntagResource",
  383                  "ecr:BatchDeleteImage",
  384                  "ecr:BatchImportUpstreamImage",
  385                  "ecr:CompleteLayerUpload",
  386                  "ecr:CreatePullThroughCacheRule",
  387                  "ecr:CreateRepository",
  388                  "ecr:DeleteLifecyclePolicy",
  389                  "ecr:DeletePullThroughCacheRule",
  390                  "ecr:DeleteRepository",
  391                  "ecr:InitiateLayerUpload",
  392                  "ecr:PutImage",
  393                  "ecr:PutImageScanningConfiguration",
  394                  "ecr:PutImageTagMutability",
  395                  "ecr:PutLifecyclePolicy",
  396                  "ecr:PutRegistryScanningConfiguration",
  397                  "ecr:ReplicateImage",
  398                  "ecr:StartImageScan",
  399                  "ecr:StartLifecyclePolicyPreview",
  400                  "ecr:UploadLayerPart",
  401                  "ecr:DeleteRepositoryPolicy",
  402                  "ecr:SetRepositoryPolicy"
  403              ],
  404              "Resource": [
  405                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tap-build-service",
  406                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tanzu-application-platform/tanzu-java-web-app",
  407                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tanzu-application-platform/tanzu-java-web-app-bundle",
  408                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tanzu-application-platform",
  409                  "arn:aws:ecr:${AWS_REGION}:${AWS_ACCOUNT_ID}:repository/tanzu-application-platform/*"
  410              ],
  411              "Effect": "Allow",
  412              "Sid": "TAPEcrWorkloadScoped"
  413          }
  414      ]
  415  }
  416  EOF
  417  cat << EOF > workload-trust-policy.json
  418  {
  419      "Version": "2012-10-17",
  420      "Statement": [
  421          {
  422              "Effect": "Allow",
  423              "Principal": {
  424                  "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${oidcProvider}"
  425              },
  426              "Action": "sts:AssumeRoleWithWebIdentity",
  427              "Condition": {
  428                  "StringEquals": {
  429                      "${oidcProvider}:sub": "system:serviceaccount:default:default",
  430                      "${oidcProvider}:aud": "sts.amazonaws.com"
  431                  }
  432              }
  433* 
  434* [A
  435  }
  436  EOF
  437  # Create the Build Service Role
  438  aws iam create-role --role-name tap-build-service --assume-role-policy-document file://build-service-trust-policy.json
  439  # Attach the Policy to the Build Role
  440  aws iam put-role-policy --role-name tap-build-service --policy-name tapBuildServicePolicy --policy-document file://build-service-policy.json
  441  # Create the Workload Role
  442  aws iam create-role --role-name tap-workload --assume-role-policy-document file://workload-trust-policy.json
  443  # Attach the Policy to the 
  444  history 100
  445  aws iam put-role-policy --role-name tap-workload --policy-name tapWorkload --policy-document file://workload-policy.json
  446  history 100 > history.txt
  447  kubectl config get-context
  448  kubectl config -h
  449  kubectl config get-contexts
  450  aws sts get-caller-identity
  451  aws eks --region us-east-2 update-kubeconfig --name tap-aws-13
  452   export AWS_ACCESS_KEY_ID=ASIA2FR7TGQECTQF7Y7F
  453   export AWS_SECRET_ACCESS_KEY=b13QTcH7xZayiPF7LWBKYXQQ9o7Z19yUspXWU9kd
  454   export AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEFIaCXVzLWVhc3QtMSJHMEUCIQD9J06njl9WXAUCwevAeA+uo47jlYO+PhnzBKImA6H2wAIgR1c/Jcvb86sQLePuMOnCCYK4tQE3eNAyHVxKhBWzTzIqnwIIaxABGgw2OTkxMzkzMDY1MDQiDEBN8Q+SFeat4vw8gyr8AXjKfaTG4xe757Qkqj0y1BeZpPRsfbZsu94uYF21pVuVOIiIqbPwPyY97ylWI9YzH8We1nkksqr7YnlHYQ0tM+6QC8Qewxlihv4aMAkmm8r+C6L+Jenewqv1c89dSofNq9tiuETBZhKoMY4TXQfp0C63mGv8L/k5f1oceqpKhni3TgH3gvHrwfLo/3d1BnobjPp4yAzRLhg+6NU6NCIbIPWIb2ddHkAo2k3di78QfqzH48HkrQykEDzhHXi2du9HcLca1lh97okRhvCXuss94TVxIoR5xW/ERMxfIarVtWvjq15u+PsPS/oHaXyAnwSj/gWk30xdndmdRLUpnzDx75qcBjqdAQ6ma9cO2e23YkA7y4PZBea8+joiq/0ZOuj5ScHxYnaUrZqoPAJRqj0F7wFsS+12INybJ4TzqgSS2bJzLO2hWdjGvw7vTGlStsO29oVg0RzGj3cbhA9c5XYA5bzR8LrxAfbKfOnuvN/i9SB49Swqy1ESweoSMMwXHHmP+Sa+snT6NTYB3fq25jl6ODyTZB+pVWZynbMnAhc2EgXxjUI=
  455  kubectl get po
  456  kubectl get po -A
  457  kubectl get po
  458   export AWS_ACCESS_KEY_ID=ASIA2FR7TGQEAMDDFSW2
  459   export AWS_SECRET_ACCESS_KEY=3N6p45NxDdQLUtkKt1OQWJ0F4PpUqlGvkTQZBIyo
  460   export AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEGMaCXVzLWVhc3QtMSJGMEQCIHknsecuwUworNc0QEcRq1EisBRbtMTQqOhAufWmfmhMAiAxQOPC3yalHvfE7qP0FvqxyU5/h58CJQ9V5sM9IHi7lSqfAgh7EAEaDDY5OTEzOTMwNjUwNCIMhVFvRok5OuMeU9P4KvwBg7h1SMt19xPu1nz+fbmtpzwagRXaZIK/cTzDB44YZJpfcMnLQ5zJbEAnJO/dxFqcmiTasuTLTBdS2aLtMzzuGlcGhtwiDWEzRFcCvntYk5esbl5yklOF2SC37g2LTot1kQHV9HcuFeNwwQDbYS9T9ZnDU3UUK2Omw3i4LxSk+edyOqYVzmXmoooZtm3dQ/KXWPqTEkjXpNdTP8QNUUhxhMILiwxg3hmeywo0+0bqNVqEUmR9TE0WRJ1bc+59xfzxrj0xaBZvesYt6fNiooWsb8Z/Wf6qapOwFwvMIisBOvpfWuVP5FDHDkdg7zGs/TKfpTzFOq8bJqPsV9scMKm+npwGOp4B7k1uJlEdY515fSCbPj3bdQqxVo+RMHzzLodEQCJZrTWD3zc+k8rEHUNld/yPYaHD9AI4JThO1Kqbh63wrmlPWGVmIeNGSSMlvZxrLmJ7oeeLBjw30/CqBq6cpikx7fS5cJiV4AFqXY9X7wzTz9rNJpnnL7/FRsnolrRtq7qwrTY3bM8R/BBIjBLP0tsjQ+8ghw2oF/SfhOuTNnmcgRg=
  461  kubectl get po
  462  export INSTALL_BUNDLE=registry.tanzu.vmware.com/tanzu-cluster-essentials/cluster-essentials-bundle@sha256:54bf611711923dccd7c7f10603c846782b90644d48f1cb570b43a082d18e23b9
  463  export INSTALL_REGISTRY_HOSTNAME=registry.tanzu.vmware.com
  464  export INSTALL_REGISTRY_USERNAME="kmantha@vmware.com"
  465  export INSTALL_REGISTRY_PASSWORD="VMware123!"
  466  cd $HOME/tanzu-cluster-essentials
  467  ./install.sh --yes
  468  ls
  469  install.bat
  470  which kubectl
  471  curl -o kubectl.exe https://s3.cn-north-1.amazonaws.com.cn/amazon-eks/1.24.7/2022-10-31/bin/windows/amd64/kubectl.exe
  472  ls
  473  pwd
  474  which kubectl
  475  which kubectl
  476  kubectl version
  477  kubectl
  478  exit
  479  #!/bin/bash -e
  480  INFRA_LAB_CONFIG_YAML=local-config/infra-lab-values.yaml
  481  # if first argument is "admin" then use the H2O login info
  482  if [ "$1" = "admin" ]; then     export USER=$(yq e .vsphere.admin_username $INFRA_LAB_CONFIG_YAML);     export KUBECTL_VSPHERE_PASSWORD=$(yq e .vsphere.admin_password $INFRA_LAB_CONFIG_YAML); else     export USER=$1@vsphere.local;     export KUBECTL_VSPHERE_PASSWORD=$(yq e .vsphere.standard_user_password $INFRA_LAB_CONFIG_YAML); fi
  483  export SUPERVISOR_CLUSTER=$(yq e .vsphere.supervisor.host $INFRA_LAB_CONFIG_YAML)
  484  # if there is no second argument, then assumed just trying to loginto the supervisor cluster, else log into TKC
  485  if [ -z "$2" ]; then     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --insecure-skip-tls-verify     kubectl config use-context $SUPERVISOR_CLUSTER elif [ "$2" = "all" ]; then     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-build --tanzu-kubernetes-cluster-namespace tap-services --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-run-test --tanzu-kubernetes-cluster-namespace dev --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-iterate --tanzu-kubernetes-cluster-namespace dev --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-view --tanzu-kubernetes-cluster-namespace tap-services --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --insecure-skip-tls-verify     kubectl config use-context $SUPERVISOR_CLUSTER else     export TKC_NAME=$3;     export VSPHERE_NAMESPACE_NAME=$2     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name $TKC_NAME --tanzu-kubernetes-cluster-namespace $VSPHERE_NAMESPACE_NAME --insecure-skip-tls-verify     kubectl config use-context $TKC_NAME fi
  486  #!/bin/bash -e
  487  INFRA_LAB_CONFIG_YAML=local-config/infra-lab-values.yaml
  488  # if first argument is "admin" then use the H2O login info
  489  if [ "$1" = "admin" ]; then     export USER=$(yq e .vsphere.admin_username $INFRA_LAB_CONFIG_YAML);     export KUBECTL_VSPHERE_PASSWORD=$(yq e .vsphere.admin_password $INFRA_LAB_CONFIG_YAML); else     export USER=$1@vsphere.local;     export KUBECTL_VSPHERE_PASSWORD=$(yq e .vsphere.standard_user_password $INFRA_LAB_CONFIG_YAML); fi
  490  export SUPERVISOR_CLUSTER=$(yq e .vsphere.supervisor.host $INFRA_LAB_CONFIG_YAML)
  491  # if there is no second argument, then assumed just trying to loginto the supervisor cluster, else log into TKC
  492  if [ -z "$2" ]; then     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --insecure-skip-tls-verify     kubectl config use-context $SUPERVISOR_CLUSTER elif [ "$2" = "all" ]; then     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-build --tanzu-kubernetes-cluster-namespace tap-services --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-run-test --tanzu-kubernetes-cluster-namespace dev --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-iterate --tanzu-kubernetes-cluster-namespace dev --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name tap-view --tanzu-kubernetes-cluster-namespace tap-services --insecure-skip-tls-verify     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --insecure-skip-tls-verify     kubectl config use-context $SUPERVISOR_CLUSTER else     export TKC_NAME=$3;     export VSPHERE_NAMESPACE_NAME=$2     kubectl vsphere login --server $SUPERVISOR_CLUSTER -u $USER --tanzu-kubernetes-cluster-name $TKC_NAME --tanzu-kubernetes-cluster-namespace $VSPHERE_NAMESPACE_NAME --insecure-skip-tls-verify     kubectl config use-context $TKC_NAME fi
  493  history
  494  history 200 > hist30.txt
  495  history 500 > hist30.txt
